window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "maat", "modulename": "maat", "kind": "module", "doc": "<h1 id=\"maat-v220\">Maat v2.2.0</h1>\n\n<p>Welcome to <strong>M</strong>y <strong>A</strong>n<strong>A</strong>lysis <strong>T</strong>ools; or just <strong>Maat</strong>, as the Egyptian goddess of truth, order, and justice.  </p>\n\n<p>Just as an egyptian goddess fallen from the sky, this Python package makes my life easier when analyzing INS, FTIR and Raman CSV data files, among others.\nBear in mind that, as any egyptian god, Maat is not perfect and may be full of bugs. Please report any issues you may find.  </p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>As always, it is strongly recommended to install this package inside a Python virtual environment.  </p>\n\n<p>Install the required dependencies by running:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>numpy<span class=\"w\"> </span>pandas<span class=\"w\"> </span>matplotlib<span class=\"w\"> </span>scipy\n</code></pre>\n</div>\n\n<p>To install Maat, clone the repository from <a href=\"https://github.com/pablogila/Maat/\">GitHub</a> and run:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p><a href=\"https://pablogila.github.io/Maat/\">Check the latest documentation online</a>. You can also check the documentation offline at <code>/docs/maat.html</code>.   </p>\n\n<p>The documentation can be compiled automatically using <a href=\"https://pdoc.dev/\">pdoc</a>, by running:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">source</span><span class=\"w\"> </span>pdoc.sh\n</code></pre>\n</div>\n\n<h2 id=\"license\">License</h2>\n\n<div class=\"alert note\">\n<em>Note</em>\n<p>TL;DR:\n  Do what you want with this, as long as you share the source code of your modifications, also under GNU AGPLv3.  </p>\n</div>\n\n<p>Copyright (C) 2024  Pablo Gila-Herranz</p>\n\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the attached GNU Affero General Public License for more details.</p>\n"}, {"fullname": "maat.classes", "modulename": "maat.classes", "kind": "module", "doc": "<p>This module contains the core classes and their functions.</p>\n"}, {"fullname": "maat.classes.ScaleRange", "modulename": "maat.classes", "qualname": "ScaleRange", "kind": "class", "doc": "<p>The ScaleRange object is used to handle the normalization of the data inside the specified x-range,\nto the same heigth as in the specified <code>index</code> dataset (the first one by default).</p>\n\n<p>Custom heights can be normalized with <code>ymin</code> and <code>ymax</code>, overriding the x-values.\nFor example, you may want to normalize with respect to the height of a given peak that overlaps with another.\nThose peaks may have ymin values of 2 and 3, and ymax values of 50 and 60 respectively. In that case:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">scale_range</span> <span class=\"o\">=</span> <span class=\"n\">ScaleRange</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>To normalize when plotting with <code>maat.plot.spectra(Spectra)</code>, remember to set <code>Plotting.normalize=True</code>.\nWhen normalizing the plot, all datasets are fitted inside the plotting window, scaling over the entire data range into view.\nTo override this behaviour and expand over the given range to fill the plot window, you can set <code>ScaleRange.zoom=True</code>.\nThis zoom setting can also be enabled without normalizing the plot, resulting in a zoom over the given range\nso that the <code>index</code> dataset fits the full plotting window, scaling the rest of the set accordingly.</p>\n"}, {"fullname": "maat.classes.ScaleRange.__init__", "modulename": "maat.classes", "qualname": "ScaleRange.__init__", "kind": "function", "doc": "<p>All values can be set when initializing the ScaleRange object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">xmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ymin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ymax</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zoom</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "maat.classes.ScaleRange.index", "modulename": "maat.classes", "qualname": "ScaleRange.index", "kind": "variable", "doc": "<p>Index of the dataframe to use as reference.</p>\n"}, {"fullname": "maat.classes.ScaleRange.xmin", "modulename": "maat.classes", "qualname": "ScaleRange.xmin", "kind": "variable", "doc": "<p>Minimum x-value to start normalizing the plots.</p>\n"}, {"fullname": "maat.classes.ScaleRange.xmax", "modulename": "maat.classes", "qualname": "ScaleRange.xmax", "kind": "variable", "doc": "<p>Maximum x-value to normalize the plots.</p>\n"}, {"fullname": "maat.classes.ScaleRange.ymin", "modulename": "maat.classes", "qualname": "ScaleRange.ymin", "kind": "variable", "doc": "<p>Minimum y-value to normalize the plots.</p>\n"}, {"fullname": "maat.classes.ScaleRange.ymax", "modulename": "maat.classes", "qualname": "ScaleRange.ymax", "kind": "variable", "doc": "<p>Minimum y-value to normalize the plots.\nIf <code>plotting.normalize=True</code>, the plots are normalized according to the y-values provided.</p>\n"}, {"fullname": "maat.classes.ScaleRange.zoom", "modulename": "maat.classes", "qualname": "ScaleRange.zoom", "kind": "variable", "doc": "<p>Used when plotting with <code>maat.plot.spectra()</code>.\nIf true, the data inside the range is scaled up to fit the entire plotting window.</p>\n"}, {"fullname": "maat.classes.ScaleRange.set_x", "modulename": "maat.classes", "qualname": "ScaleRange.set_x", "kind": "function", "doc": "<p>Override with an horizontal range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">xmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.classes.ScaleRange.set_y", "modulename": "maat.classes", "qualname": "ScaleRange.set_y", "kind": "function", "doc": "<p>Override with a vertical range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ymin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">ymax</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.classes.Plotting", "modulename": "maat.classes", "qualname": "Plotting", "kind": "class", "doc": "<p>Plotting options. To be used inside the <code>Spectra</code> class. Read by <code>maat.plot.spectra()</code>.</p>\n"}, {"fullname": "maat.classes.Plotting.__init__", "modulename": "maat.classes", "qualname": "Plotting.__init__", "kind": "function", "doc": "<p>Default values can be overwritten when initializing the Plotting object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">low_xlim</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">top_xlim</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">low_ylim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">top_ylim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">add_top</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">add_low</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">hline</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hline_error</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vline</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vline_error</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_xscale</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_yticks</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_size</span><span class=\"o\">=</span><span class=\"s1\">&#39;medium&#39;</span></span>)</span>"}, {"fullname": "maat.classes.Plotting.low_xlim", "modulename": "maat.classes", "qualname": "Plotting.low_xlim", "kind": "variable", "doc": "<p>Minimum x-value to plot.</p>\n"}, {"fullname": "maat.classes.Plotting.top_xlim", "modulename": "maat.classes", "qualname": "Plotting.top_xlim", "kind": "variable", "doc": "<p>Maximum x-value to plot.</p>\n"}, {"fullname": "maat.classes.Plotting.low_ylim", "modulename": "maat.classes", "qualname": "Plotting.low_ylim", "kind": "variable", "doc": "<p>Minimum y-value to plot.</p>\n"}, {"fullname": "maat.classes.Plotting.top_ylim", "modulename": "maat.classes", "qualname": "Plotting.top_ylim", "kind": "variable", "doc": "<p>Maximum y-value to plot.</p>\n"}, {"fullname": "maat.classes.Plotting.add_top", "modulename": "maat.classes", "qualname": "Plotting.add_top", "kind": "variable", "doc": "<p>Add a given separation on top of the plot.</p>\n"}, {"fullname": "maat.classes.Plotting.add_low", "modulename": "maat.classes", "qualname": "Plotting.add_low", "kind": "variable", "doc": "<p>Add a given separation on the bottom of the plot.</p>\n"}, {"fullname": "maat.classes.Plotting.hline", "modulename": "maat.classes", "qualname": "Plotting.hline", "kind": "variable", "doc": "<p>TODO: implement horizontal lines</p>\n"}, {"fullname": "maat.classes.Plotting.hline_error", "modulename": "maat.classes", "qualname": "Plotting.hline_error", "kind": "variable", "doc": "<p>TODO: implement error for horizontal lines</p>\n"}, {"fullname": "maat.classes.Plotting.vline", "modulename": "maat.classes", "qualname": "Plotting.vline", "kind": "variable", "doc": "<p>List of vertical lines to plot.</p>\n"}, {"fullname": "maat.classes.Plotting.vline_error", "modulename": "maat.classes", "qualname": "Plotting.vline_error", "kind": "variable", "doc": "<p>If <code>vline_error</code> is not <code>None</code>, it will plot a shaded area of the specified width around the vertical lines.\nIt can be an array of the same length as <code>vline</code>, or a single value to be applied to all.</p>\n"}, {"fullname": "maat.classes.Plotting.figsize", "modulename": "maat.classes", "qualname": "Plotting.figsize", "kind": "variable", "doc": "<p>Tuple with the figure size, as in matplotlib.</p>\n"}, {"fullname": "maat.classes.Plotting.log_xscale", "modulename": "maat.classes", "qualname": "Plotting.log_xscale", "kind": "variable", "doc": "<p>If true, plot the x-axis in logarithmic scale.</p>\n"}, {"fullname": "maat.classes.Plotting.offset", "modulename": "maat.classes", "qualname": "Plotting.offset", "kind": "variable", "doc": "<p>If <code>True</code>, the plots will be separated automatically. It can be set to a float, to offset the plots by a given value.</p>\n"}, {"fullname": "maat.classes.Plotting.normalize", "modulename": "maat.classes", "qualname": "Plotting.normalize", "kind": "variable", "doc": "<p><code>True</code> or <code>'y'</code> or <code>'Y'</code> to normalize the heights, <code>'area'</code> or <code>'a'</code> or <code>'A'</code> to normalize the areas.</p>\n"}, {"fullname": "maat.classes.Plotting.show_yticks", "modulename": "maat.classes", "qualname": "Plotting.show_yticks", "kind": "variable", "doc": "<p>Show or not the yticks on the plot.</p>\n"}, {"fullname": "maat.classes.Plotting.legend", "modulename": "maat.classes", "qualname": "Plotting.legend", "kind": "variable", "doc": "<p>If <code>None</code>, the filenames will be used as legend. Can be a bool to show or hide the plot legend.\nIt can also be an array containing the strings to display. Elements set to <code>False</code> will not be displayed.</p>\n"}, {"fullname": "maat.classes.Plotting.legend_title", "modulename": "maat.classes", "qualname": "Plotting.legend_title", "kind": "variable", "doc": "<p>Title of the legend.</p>\n"}, {"fullname": "maat.classes.Plotting.legend_size", "modulename": "maat.classes", "qualname": "Plotting.legend_size", "kind": "variable", "doc": "<p>Size of the legend, as in matplotlib.</p>\n"}, {"fullname": "maat.classes.Spectra", "modulename": "maat.classes", "qualname": "Spectra", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "maat.classes.Spectra.__init__", "modulename": "maat.classes", "qualname": "Spectra.__init__", "kind": "function", "doc": "<p>All values can be set when initializing the Spectra object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_as</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units_in</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale_range</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">ScaleRange</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">ScaleRange</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">plotting</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Plotting</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Plotting</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "maat.classes.Spectra.type", "modulename": "maat.classes", "qualname": "Spectra.type", "kind": "variable", "doc": "<p>Type of the spectra: <code>INS</code>, <code>ATR</code>, or <code>RAMAN</code>.</p>\n"}, {"fullname": "maat.classes.Spectra.title", "modulename": "maat.classes", "qualname": "Spectra.title", "kind": "variable", "doc": "<p>Title of the plot.</p>\n"}, {"fullname": "maat.classes.Spectra.save_as", "modulename": "maat.classes", "qualname": "Spectra.save_as", "kind": "variable", "doc": "<p>Filename to save the plot.</p>\n"}, {"fullname": "maat.classes.Spectra.filename", "modulename": "maat.classes", "qualname": "Spectra.filename", "kind": "variable", "doc": "<p>List containing the filenames with the spectral data.</p>\n"}, {"fullname": "maat.classes.Spectra.dataframe", "modulename": "maat.classes", "qualname": "Spectra.dataframe", "kind": "variable", "doc": "<p>List containing the pandas dataframes with the spectral data.</p>\n"}, {"fullname": "maat.classes.Spectra.units", "modulename": "maat.classes", "qualname": "Spectra.units", "kind": "variable", "doc": "<p>Target units of the spectral data.</p>\n"}, {"fullname": "maat.classes.Spectra.units_in", "modulename": "maat.classes", "qualname": "Spectra.units_in", "kind": "variable", "doc": "<p>Input units of the spectral data.</p>\n"}, {"fullname": "maat.classes.Spectra.scale_range", "modulename": "maat.classes", "qualname": "Spectra.scale_range", "kind": "variable", "doc": "<p><code>ScaleRange</code> object, used to set the normalization parameters.</p>\n"}, {"fullname": "maat.classes.Spectra.plotting", "modulename": "maat.classes", "qualname": "Spectra.plotting", "kind": "variable", "doc": "<p><code>Plotting</code> object, used to set the plotting options.</p>\n"}, {"fullname": "maat.classes.Spectra.set_units", "modulename": "maat.classes", "qualname": "Spectra.set_units", "kind": "function", "doc": "<p>'Method to change units. ALWAYS use this method to do that.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">units</span>, </span><span class=\"param\"><span class=\"n\">units_in</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default_unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;cm-1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.classes.Material", "modulename": "maat.classes", "qualname": "Material", "kind": "class", "doc": "<p>Material class. To play around with different material compositions.</p>\n"}, {"fullname": "maat.classes.Material.__init__", "modulename": "maat.classes", "qualname": "Material.__init__", "kind": "function", "doc": "<p>All values can be set when initializing the Material object. However, it is recommended\nto only set the atoms and the grams (and the name), and calculate the rest with <code>Material.set()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grams</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grams_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mols</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mols_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">molar_mass</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cross_section</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "maat.classes.Material.atoms", "modulename": "maat.classes", "qualname": "Material.atoms", "kind": "variable", "doc": "<p>Dict of atoms in the material.</p>\n"}, {"fullname": "maat.classes.Material.name", "modulename": "maat.classes", "qualname": "Material.name", "kind": "variable", "doc": "<p>Name of the material.</p>\n"}, {"fullname": "maat.classes.Material.grams", "modulename": "maat.classes", "qualname": "Material.grams", "kind": "variable", "doc": "<p>Mass, in grams.</p>\n"}, {"fullname": "maat.classes.Material.grams_error", "modulename": "maat.classes", "qualname": "Material.grams_error", "kind": "variable", "doc": "<p>Error of the measured mass in grams. Set automatically with <code>self.set_mass()</code>.</p>\n"}, {"fullname": "maat.classes.Material.mols", "modulename": "maat.classes", "qualname": "Material.mols", "kind": "variable", "doc": "<p>Number of moles. Set automatically with <code>self.set_mass()</code>.</p>\n"}, {"fullname": "maat.classes.Material.mols_error", "modulename": "maat.classes", "qualname": "Material.mols_error", "kind": "variable", "doc": "<p>Error of the number of moles. Set automatically with <code>self.set_mass()</code>.</p>\n"}, {"fullname": "maat.classes.Material.molar_mass", "modulename": "maat.classes", "qualname": "Material.molar_mass", "kind": "variable", "doc": "<p>Molar mass of the material, in mol/g. Calculated automatically with <code>self.set_mass()</code>.</p>\n"}, {"fullname": "maat.classes.Material.cross_section", "modulename": "maat.classes", "qualname": "Material.cross_section", "kind": "variable", "doc": "<p>Cross section of the material, in barns. Calculated automatically with <code>self.set_cross_section()</code>.</p>\n"}, {"fullname": "maat.classes.Material.set", "modulename": "maat.classes", "qualname": "Material.set", "kind": "function", "doc": "<p>Set the molar mass, cross section and errors of the material.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.classes.Material.print", "modulename": "maat.classes", "qualname": "Material.print", "kind": "function", "doc": "<p>Print a summary with the material information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.constants", "modulename": "maat.constants", "kind": "module", "doc": "<p>This module contains constants and conversion factors.</p>\n"}, {"fullname": "maat.constants.version", "modulename": "maat.constants", "qualname": "version", "kind": "variable", "doc": "<hr />\n\n<h1 id=\"energy-conversion-factors\">Energy conversion factors</h1>\n", "default_value": "&#x27;v2.2.0&#x27;"}, {"fullname": "maat.constants.eV_to_meV", "modulename": "maat.constants", "qualname": "eV_to_meV", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "maat.constants.meV_to_eV", "modulename": "maat.constants", "qualname": "meV_to_eV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "maat.constants.meV_to_cm", "modulename": "maat.constants", "qualname": "meV_to_cm", "kind": "variable", "doc": "<p></p>\n", "default_value": "8.0655"}, {"fullname": "maat.constants.cm_to_meV", "modulename": "maat.constants", "qualname": "cm_to_meV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.12398487384539086"}, {"fullname": "maat.constants.eV_to_J", "modulename": "maat.constants", "qualname": "eV_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.602176634e-19"}, {"fullname": "maat.constants.J_to_eV", "modulename": "maat.constants", "qualname": "J_to_eV", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.241509074460763e+18"}, {"fullname": "maat.constants.Ry_to_eV", "modulename": "maat.constants", "qualname": "Ry_to_eV", "kind": "variable", "doc": "<p></p>\n", "default_value": "13.60569312299"}, {"fullname": "maat.constants.eV_to_Ry", "modulename": "maat.constants", "qualname": "eV_to_Ry", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.07349864435133158"}, {"fullname": "maat.constants.Ry_to_J", "modulename": "maat.constants", "qualname": "Ry_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.179872361103e-18"}, {"fullname": "maat.constants.J_to_Ry", "modulename": "maat.constants", "qualname": "J_to_Ry", "kind": "variable", "doc": "<p></p>\n", "default_value": "4.5874245567938074e+17"}, {"fullname": "maat.constants.cal_to_J", "modulename": "maat.constants", "qualname": "cal_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "4.184"}, {"fullname": "maat.constants.J_to_cal", "modulename": "maat.constants", "qualname": "J_to_cal", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.2390057361376673"}, {"fullname": "maat.constants.kcal_to_J", "modulename": "maat.constants", "qualname": "kcal_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "4184.0"}, {"fullname": "maat.constants.J_to_kcal", "modulename": "maat.constants", "qualname": "J_to_kcal", "kind": "variable", "doc": "<hr />\n\n<h1 id=\"distance-conversion-factors\">Distance conversion factors</h1>\n\n<p>Note that <code>A</code> refers to Angstroms.</p>\n", "default_value": "0.0002390057361376673"}, {"fullname": "maat.constants.A_to_m", "modulename": "maat.constants", "qualname": "A_to_m", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-10"}, {"fullname": "maat.constants.m_to_A", "modulename": "maat.constants", "qualname": "m_to_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "10000000000.0"}, {"fullname": "maat.constants.bohr_to_m", "modulename": "maat.constants", "qualname": "bohr_to_m", "kind": "variable", "doc": "<p></p>\n", "default_value": "5.29177210544e-11"}, {"fullname": "maat.constants.m_to_bohr", "modulename": "maat.constants", "qualname": "m_to_bohr", "kind": "variable", "doc": "<p></p>\n", "default_value": "18897261259.077824"}, {"fullname": "maat.constants.A_to_bohr", "modulename": "maat.constants", "qualname": "A_to_bohr", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.8897261259077824"}, {"fullname": "maat.constants.bohr_to_A", "modulename": "maat.constants", "qualname": "bohr_to_A", "kind": "variable", "doc": "<hr />\n\n<h1 id=\"mass-conversion-factors\">Mass conversion factors</h1>\n", "default_value": "0.529177210544"}, {"fullname": "maat.constants.amu_to_kg", "modulename": "maat.constants", "qualname": "amu_to_kg", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.6605390666e-27"}, {"fullname": "maat.constants.kg_to_amu", "modulename": "maat.constants", "qualname": "kg_to_amu", "kind": "variable", "doc": "<hr />\n\n<h1 id=\"pressure-conversion-factors\">Pressure conversion factors</h1>\n", "default_value": "6.022140762081123e+26"}, {"fullname": "maat.constants.GPa_to_Pa", "modulename": "maat.constants", "qualname": "GPa_to_Pa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000000.0"}, {"fullname": "maat.constants.Pa_to_GPa", "modulename": "maat.constants", "qualname": "Pa_to_GPa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-09"}, {"fullname": "maat.constants.kbar_to_bar", "modulename": "maat.constants", "qualname": "kbar_to_bar", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "maat.constants.bar_to_kbar", "modulename": "maat.constants", "qualname": "bar_to_kbar", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "maat.constants.Pa_to_bar", "modulename": "maat.constants", "qualname": "Pa_to_bar", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-05"}, {"fullname": "maat.constants.bar_to_Pa", "modulename": "maat.constants", "qualname": "bar_to_Pa", "kind": "variable", "doc": "<p></p>\n", "default_value": "99999.99999999999"}, {"fullname": "maat.constants.GPa_to_kbar", "modulename": "maat.constants", "qualname": "GPa_to_kbar", "kind": "variable", "doc": "<p></p>\n", "default_value": "10.0"}, {"fullname": "maat.constants.kbar_to_GPa", "modulename": "maat.constants", "qualname": "kbar_to_GPa", "kind": "variable", "doc": "<hr />\n\n<h1 id=\"time-conversion-factors\">Time conversion factors</h1>\n\n<p>Note that <code>H</code> refers to hours.</p>\n", "default_value": "0.1"}, {"fullname": "maat.constants.H_to_s", "modulename": "maat.constants", "qualname": "H_to_s", "kind": "variable", "doc": "<p></p>\n", "default_value": "3600.0"}, {"fullname": "maat.constants.s_to_H", "modulename": "maat.constants", "qualname": "s_to_H", "kind": "variable", "doc": "<hr />\n\n<h1 id=\"universal-constants\">Universal constants</h1>\n\n<p>Given in SI units unless stated otherwise.</p>\n", "default_value": "0.0002777777777777778"}, {"fullname": "maat.constants.h", "modulename": "maat.constants", "qualname": "h", "kind": "variable", "doc": "<p>Planck constant, in J\u00b7s.</p>\n", "default_value": "6.62607015e-34"}, {"fullname": "maat.constants.h_eV", "modulename": "maat.constants", "qualname": "h_eV", "kind": "variable", "doc": "<p>Planck constant, in eV\u00b7s.</p>\n", "default_value": "4.135667696923859e-15"}, {"fullname": "maat.constants.hbar", "modulename": "maat.constants", "qualname": "hbar", "kind": "variable", "doc": "<p>Reduced Planck constant, in J\u00b7s.</p>\n", "default_value": "1.0545718176461565e-34"}, {"fullname": "maat.constants.hbar_eV", "modulename": "maat.constants", "qualname": "hbar_eV", "kind": "variable", "doc": "<p>Reduced Planck constant, in eV\u00b7s.</p>\n", "default_value": "6.582119569509066e-16"}, {"fullname": "maat.constants.mass", "modulename": "maat.constants", "qualname": "mass", "kind": "variable", "doc": "<p>Atomic masses, in atomic mass units (amu) by default.</p>\n", "default_value": "{&#x27;H&#x27;: 1.00784, &#x27;D&#x27;: 2.014102, &#x27;C&#x27;: 12.0107, &#x27;N&#x27;: 14.0067, &#x27;I&#x27;: 126.90447, &#x27;Pb&#x27;: 207.2}"}, {"fullname": "maat.constants.mass_kg", "modulename": "maat.constants", "qualname": "mass_kg", "kind": "variable", "doc": "<p>Atomic masses, in kilograms.</p>\n", "default_value": "{&#x27;H&#x27;: 1.673557692882144e-27, &#x27;D&#x27;: 3.3444950551171926e-27, &#x27;C&#x27;: 1.994423656721262e-26, &#x27;N&#x27;: 2.325867254414622e-26, &#x27;I&#x27;: 2.107298301611677e-25, &#x27;Pb&#x27;: 3.4406369459951995e-25}"}, {"fullname": "maat.constants.cross_section", "modulename": "maat.constants", "qualname": "cross_section", "kind": "variable", "doc": "<p>Total bound scattering cross sections, in barns (1 b = 100 fm$^2$).\nFrom Felix Fernandez-Alonso 2013 book.</p>\n\n<hr />\n\n<h1 id=\"string-dictionaries\">String dictionaries</h1>\n\n<p>To be used in the input correction functions.</p>\n", "default_value": "{&#x27;H&#x27;: 81.67, &#x27;D&#x27;: 7.64, &#x27;C&#x27;: 5.551, &#x27;N&#x27;: 11.51, &#x27;I&#x27;: 3.81, &#x27;Pb&#x27;: 11.118}"}, {"fullname": "maat.constants.unit_keys", "modulename": "maat.constants", "qualname": "unit_keys", "kind": "variable", "doc": "<p>Strings with the name of the units, used to correct and normalise user inputs.</p>\n", "default_value": "{&#x27;mol&#x27;: [&#x27;mol&#x27;, &#x27;mols&#x27;, &#x27;mole&#x27;, &#x27;moles&#x27;, &#x27;Mol&#x27;, &#x27;Mols&#x27;, &#x27;Mole&#x27;, &#x27;Moles&#x27;, &#x27;MOL&#x27;, &#x27;MOLS&#x27;, &#x27;MOLE&#x27;, &#x27;MOLES&#x27;], &#x27;g&#x27;: [&#x27;g&#x27;, &#x27;gram&#x27;, &#x27;grams&#x27;, &#x27;G&#x27;, &#x27;Gram&#x27;, &#x27;Grams&#x27;, &#x27;GRAM&#x27;, &#x27;GRAMS&#x27;], &#x27;kg&#x27;: [&#x27;kg&#x27;, &#x27;Kg&#x27;, &#x27;KG&#x27;, &#x27;kilogram&#x27;, &#x27;kilograms&#x27;, &#x27;Kilogram&#x27;, &#x27;Kilograms&#x27;, &#x27;KILOGRAM&#x27;, &#x27;KILOGRAMS&#x27;], &#x27;amu&#x27;: [&#x27;amu&#x27;, &#x27;AMU&#x27;, &#x27;Amu&#x27;, &#x27;atomicmassunit&#x27;, &#x27;atomicmassunits&#x27;, &#x27;Atomicmassunit&#x27;, &#x27;Atomicmassunits&#x27;, &#x27;ATOMICMASSUNIT&#x27;, &#x27;ATOMICMASSUNITS&#x27;], &#x27;eV&#x27;: [&#x27;eV&#x27;, &#x27;ev&#x27;, &#x27;EV&#x27;, &#x27;electronvolt&#x27;, &#x27;electronvolts&#x27;, &#x27;Electronvolt&#x27;, &#x27;Electronvolts&#x27;, &#x27;ELECTRONVOLT&#x27;, &#x27;ELECTRONVOLTS&#x27;], &#x27;meV&#x27;: [&#x27;meV&#x27;, &#x27;mev&#x27;, &#x27;MEV&#x27;, &#x27;millielectronvolt&#x27;, &#x27;millielectronvolts&#x27;, &#x27;Millielectronvolt&#x27;, &#x27;Millielectronvolts&#x27;, &#x27;MILLIELECTRONVOLT&#x27;, &#x27;MILLIELECTRONVOLTS&#x27;], &#x27;J&#x27;: [&#x27;J&#x27;, &#x27;j&#x27;, &#x27;JOULE&#x27;, &#x27;JOULES&#x27;, &#x27;joule&#x27;, &#x27;joules&#x27;, &#x27;Joule&#x27;, &#x27;Joules&#x27;], &#x27;cal&#x27;: [&#x27;cal&#x27;, &#x27;Cal&#x27;, &#x27;CAL&#x27;, &#x27;calorie&#x27;, &#x27;calories&#x27;, &#x27;Calorie&#x27;, &#x27;Calories&#x27;, &#x27;CALORIE&#x27;, &#x27;CALORIES&#x27;], &#x27;kcal&#x27;: [&#x27;kcal&#x27;, &#x27;Kcal&#x27;, &#x27;KCAL&#x27;, &#x27;kilocalorie&#x27;, &#x27;kilocalories&#x27;, &#x27;Kilocalorie&#x27;, &#x27;Kilocalories&#x27;, &#x27;KILOCALORIE&#x27;, &#x27;KILOCALORIES&#x27;], &#x27;Ry&#x27;: [&#x27;Ry&#x27;, &#x27;ry&#x27;, &#x27;RY&#x27;, &#x27;rydberg&#x27;, &#x27;rydbergs&#x27;, &#x27;Rydberg&#x27;, &#x27;Rydbergs&#x27;, &#x27;RYDBERG&#x27;, &#x27;RYDBERGS&#x27;], &#x27;cm-1&#x27;: [&#x27;cm^{-1}&#x27;, &#x27;cm1&#x27;, &#x27;cm-1&#x27;, &#x27;cm^-1&#x27;, &#x27;Cm1&#x27;, &#x27;Cm-1&#x27;, &#x27;Cm^-1&#x27;, &#x27;Cm^{-1}&#x27;, &#x27;CM1&#x27;, &#x27;CM-1&#x27;, &#x27;CM^-1&#x27;, &#x27;CM^{-1}&#x27;], &#x27;cm&#x27;: [&#x27;cm&#x27;, &#x27;CM&#x27;, &#x27;Cm&#x27;, &#x27;centimeter&#x27;, &#x27;centimeters&#x27;, &#x27;Centimeter&#x27;, &#x27;Centimeters&#x27;, &#x27;CENTIMETER&#x27;, &#x27;CENTIMETERS&#x27;], &#x27;A&#x27;: [&#x27;A&#x27;, &#x27;a&#x27;, &#x27;AA&#x27;, &#x27;aa&#x27;, &#x27;angstrom&#x27;, &#x27;angstroms&#x27;, &#x27;Angstrom&#x27;, &#x27;Angstroms&#x27;, &#x27;ANGSTROM&#x27;, &#x27;ANGSTROMS&#x27;], &#x27;bohr&#x27;: [&#x27;bohr&#x27;, &#x27;Bohr&#x27;, &#x27;BOHR&#x27;, &#x27;bohr&#x27;, &#x27;Bohr&#x27;, &#x27;BOHR&#x27;, &#x27;bohrradii&#x27;, &#x27;Bohrradii&#x27;, &#x27;BOHRRADII&#x27;], &#x27;m&#x27;: [&#x27;m&#x27;, &#x27;M&#x27;, &#x27;meter&#x27;, &#x27;meters&#x27;, &#x27;Meter&#x27;, &#x27;Meters&#x27;, &#x27;METER&#x27;, &#x27;METERS&#x27;], &#x27;deg&#x27;: [&#x27;deg&#x27;, &#x27;DEG&#x27;, &#x27;Deg&#x27;, &#x27;degree&#x27;, &#x27;degrees&#x27;, &#x27;Degree&#x27;, &#x27;Degrees&#x27;, &#x27;DEGREE&#x27;, &#x27;DEGREES&#x27;], &#x27;rad&#x27;: [&#x27;rad&#x27;, &#x27;RAD&#x27;, &#x27;Rad&#x27;, &#x27;radian&#x27;, &#x27;radians&#x27;, &#x27;Radian&#x27;, &#x27;Radians&#x27;, &#x27;RADIAN&#x27;, &#x27;RADIANS&#x27;], &#x27;bar&#x27;: [&#x27;bar&#x27;, &#x27;Bar&#x27;, &#x27;BAR&#x27;, &#x27;bars&#x27;, &#x27;Bars&#x27;, &#x27;BARS&#x27;], &#x27;kbar&#x27;: [&#x27;kbar&#x27;, &#x27;Kbar&#x27;, &#x27;KBAR&#x27;, &#x27;kilobar&#x27;, &#x27;kilobars&#x27;, &#x27;Kilobar&#x27;, &#x27;Kilobars&#x27;, &#x27;KILOBAR&#x27;, &#x27;KILOBARS&#x27;], &#x27;Pa&#x27;: [&#x27;Pa&#x27;, &#x27;pa&#x27;, &#x27;PA&#x27;, &#x27;Pascal&#x27;, &#x27;Pascals&#x27;, &#x27;PASCAL&#x27;, &#x27;PASCALS&#x27;], &#x27;GPa&#x27;: [&#x27;GPa&#x27;, &#x27;Gpa&#x27;, &#x27;gpa&#x27;, &#x27;GPA&#x27;, &#x27;gigapascal&#x27;, &#x27;gigapascals&#x27;, &#x27;Gigapascal&#x27;, &#x27;Gigapascals&#x27;, &#x27;GIGAPASCAL&#x27;, &#x27;GIGAPASCALS&#x27;], &#x27;s&#x27;: [&#x27;s&#x27;, &#x27;S&#x27;, &#x27;second&#x27;, &#x27;seconds&#x27;, &#x27;Second&#x27;, &#x27;Seconds&#x27;, &#x27;SECOND&#x27;, &#x27;SECONDS&#x27;], &#x27;H&#x27;: [&#x27;H&#x27;, &#x27;h&#x27;, &#x27;hour&#x27;, &#x27;hours&#x27;, &#x27;Hour&#x27;, &#x27;Hours&#x27;, &#x27;HOUR&#x27;, &#x27;HOURS&#x27;]}"}, {"fullname": "maat.constants.spectra_keys", "modulename": "maat.constants", "qualname": "spectra_keys", "kind": "variable", "doc": "<p>Strings with the name of the spectra types, to correct user inputs.</p>\n", "default_value": "{&#x27;INS&#x27;: [&#x27;INS&#x27;, &#x27;ins&#x27;, &#x27;Ins&#x27;, &#x27;InelasticNeutronScattering&#x27;], &#x27;ATR&#x27;: [&#x27;ATR&#x27;, &#x27;atr&#x27;, &#x27;FTIR&#x27;, &#x27;ftir&#x27;, &#x27;AttenuatedTotalReflection&#x27;], &#x27;RAMAN&#x27;: [&#x27;RAMAN&#x27;, &#x27;raman&#x27;, &#x27;Raman&#x27;]}"}, {"fullname": "maat.constants.file_keys", "modulename": "maat.constants", "qualname": "file_keys", "kind": "variable", "doc": "<p>Strings with the name of the file types, to correct user inputs.</p>\n", "default_value": "{&#x27;Error&#x27;: [&#x27;Error&#x27;, &#x27;error&#x27;, &#x27;ERROR&#x27;, &#x27;Errors&#x27;, &#x27;errors&#x27;, &#x27;ERRORS&#x27;]}"}, {"fullname": "maat.deuteration", "modulename": "maat.deuteration", "kind": "module", "doc": "<p>This module contains different methods to calculate deuteration levels from spectra.</p>\n"}, {"fullname": "maat.deuteration.impulse_approx", "modulename": "maat.deuteration", "qualname": "impulse_approx", "kind": "function", "doc": "<p>Calculate the deuteration levels from INS spectra with the <em>Impulse Approximation</em>,\nsee <a href=\"https://www.tandfonline.com/doi/full/10.1080/00018732.2017.1317963\">https://www.tandfonline.com/doi/full/10.1080/00018732.2017.1317963</a>.</p>\n\n<p>Protonated and deuterated materials must be specified as <code>maat.classes.Material</code> objects.\nThe threshold controls the start of the plateau (in meV) to consider Deep Inelastic Neutron Scattering (DINS).\nThe protonated and deuterated dataframe indexes are specified by <code>H_df_index</code> and <code>D_df_index</code>, respectively.</p>\n\n<div class=\"alert warning\">\n<em>Warning</em>\n<p>This approximation is very sensitive to the mass sample, specified by <code>maat.classes.Material.grams</code>.</p>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>,</span><span class=\"param\">\t<span class=\"n\">material_H</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Material</span>,</span><span class=\"param\">\t<span class=\"n\">material_D</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Material</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>,</span><span class=\"param\">\t<span class=\"n\">H_df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">D_df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.deuteration.peaks_mapi", "modulename": "maat.deuteration", "qualname": "peaks_mapi", "kind": "function", "doc": "<p>Calculate the deuteration of your CH$_3$NH$_3$PbI$_3$ samples by integrating the INS disrotatory peaks,\nwhich appear at around 38 meV for the fully protonated sample.\nNote that <code>peaks</code> must be a dictionary with the peak limits and the baseline, as in the example below:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">peaks</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;baseline&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;baseline_error&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;h6d0&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h5d1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h4d2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h3d3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">34.7</span><span class=\"p\">,</span> <span class=\"mf\">37.3</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h2d4&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">31.0</span><span class=\"p\">,</span> <span class=\"mf\">33.0</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h1d5&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">28.0</span><span class=\"p\">,</span> <span class=\"mf\">30.5</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h0d6&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">26.5</span><span class=\"p\">,</span> <span class=\"mf\">28.0</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Peak keywords required for partial deuteration: <code>h6d0</code>, <code>h5d1</code>, <code>h4d2</code>, <code>h3d3</code>.\nAdditional peak keywords required for total deuteration: <code>h2d4</code>, <code>h1d5</code>, <code>h0d6</code>.\nIf some peak is not present in your sample, just set the limits to a small baseline plateau.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>, </span><span class=\"param\"><span class=\"n\">peaks</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.fit", "modulename": "maat.fit", "kind": "module", "doc": "<p>This module contains functions for fitting and analyzing data.</p>\n"}, {"fullname": "maat.fit.plateau", "modulename": "maat.fit", "qualname": "plateau", "kind": "function", "doc": "<p>Fit the mean value of a plateau and its standard deviation.\nUse as <code>maat.fit.plateau(spectra, cuts=[low_cut, high_cut], df_index=0)</code>.\nNote that <code>cuts</code>, <code>low_cut</code> and/or <code>top_cut</code> can be set to None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>, </span><span class=\"param\"><span class=\"n\">cuts</span>, </span><span class=\"param\"><span class=\"n\">df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.fit.area_under_peak", "modulename": "maat.fit", "qualname": "area_under_peak", "kind": "function", "doc": "<p>Calculate the area under a given peak.</p>\n\n<p>Peaks must be defined as <code>peak:list=[xmin, xmax, baseline=0, baseline_error=0]</code>.\nIf the dataset has no <code>Error</code> column, the error for each point is assumed to be the same\nas the baseline error if <code>errors_as_in_baseline=True</code>, otherwise it is assumed to be zero.\nIf <code>min_as_baseline=True</code> and <code>baseline=0</code>, the baseline is assumed to be the minimum value.\nAlso, if <code>min_as_baseline=True</code> and there are negative areas even after applying the baseline,\nthe baseline will be corrected to the minimum value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>,</span><span class=\"param\">\t<span class=\"n\">peak</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">errors_as_in_baseline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">min_as_baseline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.fit.ratio_areas", "modulename": "maat.fit", "qualname": "ratio_areas", "kind": "function", "doc": "<p>Check the ratio between two areas, e.g. to estimate deuteration levels from ATR data.\nThe ratio is calculated as <code>area / area_total</code>. This behavior is modified if <code>inverse_ratio = True</code>,\nso that the ratio is calculated as <code>(area_total - area) / area_total</code>.\nNote that changing the ratio calculation also affects the error propagation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">area</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">area_total</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">area_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">area_total_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">inverse_ratio</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.normalize", "modulename": "maat.normalize", "kind": "module", "doc": "<p>This module contains functions to normalize data and other variables.</p>\n"}, {"fullname": "maat.normalize.unit_str", "modulename": "maat.normalize", "qualname": "unit_str", "kind": "function", "doc": "<p>Normalize a given unit string to a standarized unit string, following <code>maat.constants.unit_keys</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.normalize.spectra", "modulename": "maat.normalize", "qualname": "spectra", "kind": "function", "doc": "<p>Normalize the given spectra by height, with optional <code>maat.classes.ScaleRange</code> attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.normalize.area", "modulename": "maat.normalize", "qualname": "area", "kind": "function", "doc": "<p>Normalize the given spectra by the area under the datasets, with optional <code>maat.classes.ScaleRange</code> attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.plot", "modulename": "maat.plot", "kind": "module", "doc": "<p>This module manages the plotting of data.</p>\n"}, {"fullname": "maat.plot.spectra", "modulename": "maat.plot", "qualname": "spectra", "kind": "function", "doc": "<p>Plot the given spectra, with optional <code>maat.classes.Plotting</code> and <code>maat.classes.ScaleRange</code> attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectrum</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "maat.sample", "modulename": "maat.sample", "kind": "module", "doc": "<p>This module contains premade examples of material compositions and other experimental values.</p>\n"}, {"fullname": "maat.sample.MAPI", "modulename": "maat.sample", "qualname": "MAPI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;maat.classes.Material object&gt;"}, {"fullname": "maat.sample.MAPI_CDND", "modulename": "maat.sample", "qualname": "MAPI_CDND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;maat.classes.Material object&gt;"}, {"fullname": "maat.sample.MAPI_ND", "modulename": "maat.sample", "qualname": "MAPI_ND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;maat.classes.Material object&gt;"}, {"fullname": "maat.sample.MAPI_CD", "modulename": "maat.sample", "qualname": "MAPI_CD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;maat.classes.Material object&gt;"}, {"fullname": "maat.sample.CH3NH3I", "modulename": "maat.sample", "qualname": "CH3NH3I", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;maat.classes.Material object&gt;"}, {"fullname": "maat.sample.CH3ND3I", "modulename": "maat.sample", "qualname": "CH3ND3I", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;maat.classes.Material object&gt;"}, {"fullname": "maat.sample.MAPI_peaks", "modulename": "maat.sample", "qualname": "MAPI_peaks", "kind": "variable", "doc": "<p>Experimental values of the partially-deuterated amine peaks for the disrotatory mode of MAPbI3's methylammonium.\nMeasured at TOSCA, ISIS RAL, UK, May 2024.</p>\n", "default_value": "{&#x27;baseline&#x27;: None, &#x27;baseline_error&#x27;: None, &#x27;h6d0&#x27;: [36.0, 39.0], &#x27;h5d1&#x27;: [33.0, 35.0], &#x27;h4d2&#x27;: [30.7, 33.0], &#x27;h3d3&#x27;: [28.8, 30.7]}"}, {"fullname": "maat.utils", "modulename": "maat.utils", "kind": "module", "doc": "<p>This module contains utility functions.</p>\n"}, {"fullname": "maat.utils.run_here", "modulename": "maat.utils", "qualname": "run_here", "kind": "function", "doc": "<p>Run the script from anywhere with <code>mt.run_here()</code>. Useful to run scripts from the VSCode terminal, etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();